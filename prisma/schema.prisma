// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum UserRole {
    ENTERPRISE
    STUDENT
}

enum VoteType {
    UP
    DOWN
}

enum Career {
    ET
    FT
    AE
    CF
    DS
}

model User {
    id            String         @id @default(cuid())
    name          String         @unique
    username      String?        @unique
    email         String         @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          UserRole       @default(STUDENT)
    Post          Post[]
    Student       Student[]
    Enterprise    Enterprise[]
    CommentVote   CommentVote[]
    BookMark      Bookmark[]
    Subscription  Subscription[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Student {
    id          String        @id @default(cuid())
    name        String
    lastname    String
    email       String?       @unique
    dni         Int?          @unique
    state       String?
    code        Int?          @unique
    age         Int?
    phoneNumber Int?          @unique
    career      Career?
    User        User?         @relation(fields: [userId], references: [id])
    userId      String?
    Postulacion Postulacion[]
}

model Enterprise {
    id          String         @id @default(cuid())
    name        String         @unique
    email       String         @unique
    direction   String?
    phone       String?
    User        User?          @relation(fields: [userId], references: [id])
    userId      String?
    subscribers Subscription[]
}

model Subscription {
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
    enterpriseId String

    @@id([userId, enterpriseId])
}

model Post {
    id          String        @id @default(cuid())
    title       String
    content     Json?
    published   Boolean       @default(false)
    Postulacion Postulacion[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    author    User       @relation(fields: [authorId], references: [id])
    authorId  String
    bookmarks Bookmark[]
}

model CommentVote {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    commentId String
    type      VoteType

    @@id([userId, commentId])
}

model Bookmark {
    user   User   @relation(fields: [userId], references: [id])
    userId String
    post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@id([userId, postId])
}

model Postulacion {
    id        String   @id @default(cuid())
    student   Student  @relation(fields: [studentId], references: [id], map: "student")
    Post      Post     @relation(fields: [postId], references: [id], map: "post")
    accepted  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    studentId String
    postId    String
}
